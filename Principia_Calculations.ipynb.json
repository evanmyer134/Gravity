{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "import numpy as np",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Suppose a rock's weight is measured as 10 newtons when suspended by a string in \n#a vacuum with gravity acting upon it. Suppose that when the rock is lowered into \n#water, it displaces water of weight 3 newtons. The force it then exerts on the \n#string from which it hangs would be 10 newtons minus the 3 newtons of buoyancy \n#force: 10 − 3 = 7 newtons",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#In order for a litre to have a volume of 1, 1 mole of Myer particles equates to\n#1 gram at a pressure of 1 kPa",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "constant_Avg = (6.0221408 * (10**23)) #count\nconstant_Myer = (7.737628943087982 * (10**9)) #m**3/s**2, \nlghtsp = 3 * (10**8)\n\nt = 778.859504122254 #constant #m**2/s\ncount = constant_Myer\n\n\ncurrent = count * t #m**4 / s**3\ncurrent2 = count / t #m / s\n\nmoles = current / constant_Avg\n\nconstant = current2 / lghtsp\n\ncurrent, current2, moles, constant",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#https://www.khanacademy.org/science/ap-chemistry-beta/x2eef969c74e0d802:\n#applications-of-thermodynamics/x2eef969c74e0d802:electrolysis-and-faraday-s-law/\n#v/quantitative-electrolysis-ap\n\n#https://www.chegg.com/homework-help/questions-and-answers/\n#vector-laplace-equation-h-suppose-magnetic-medium-constant-permeability-mu-\n#conductivity-si-q4703156\n\nconstant_Avg = (6.0221408 * (10**23))\n\n\n\n#I = Q/t, where I is the current in amperes, Q is the charge in coulombs, and t is \n#the time in seconds\n\nQ = 7.737628943087982 * (10**9)\nt = 778.859504122254 #constant\ncurrent = Q * t\ncurrent * 1000, 9.990893631714911e+17 /  (constant_Avg / current * 10000000)\n\n#the Laplacian of the gravitational potential due to a given mass density \n#distribution is a constant multiple of that density distribution\n\n# coulomb kg⋅m³⋅s⁻⁴⋅A⁻²\n# vacuum permititivity kg·m·s-2·A-2\n# power kg⋅m2⋅s−3\n# Newton's Constant m3⋅kg−1⋅s−2\n# work = joule kg⋅m2⋅s−2\n\n#mass = np.sqrt((1 / (1 / intensity) * Newton's Constant / lghtsp)\n\n#Biot–Savart law is an equation describing the magnetic field generated by a \n#constant electric current\n\nB = (mu*T*I) / R\n\nB = magnetic field intensit\nmu = permeability of free space\nPermitivity1 = np.sqrt(4 * np.pi * 79432.60518369792) / 1000\nPermitivity2 = constant_Newton\n\nT = number of turns\nI = current intensity\nconstant_Myer = (7.737628943087982 * (10**9))\n\nR = radius\n\n#Suppose that a magnetic medium has a constant permeability u and conductivity o. \n#Starting from Ampère's equation for B and Ohm's law in terms of J. o and E, show \n#that 7'H = 0.\n#Hint: recall that W x E = 0 in electrostatics. Write out your expression for \n#the laplacian of H in cartesian coordinates.",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#In another widely used convention, G is rescaled so that the coefficient of \n#the kinetic term is 1/4 and g appears in the covariant derivative. This should \n#be understood to be similar to a dimensionless version of the elementary charge \n#defined as",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "Myer_Structure_Constant = ((773762894.3087982**2) * (3.0*(10**8)) * (6.67430  * (10 ** 11)) * (6.62607015 * (10 ** -34)))\n\ncovder = 9871850.516235352 / 1000 #divergencefield(radial_mean)\ncharge = np.sqrt(4 * np.pi * 79432.60518369792) / 1000#Myer_Structure_Constant)\n\nMyer_Structure_Constant, charge",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "execution_count": 9,
          "output_type": "execute_result",
          "data": {
            "text/plain": "(79432.60518369792, 0.9990893631714911)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Quantum Gravitational Dynamics\n\n#Power is equal to work divided by time\n#work = force * displacement\n\nconstant_Myer = (7.737628943087982 * (10**9)) #m**3/s**2\nMyer_paricle_mass = constant_Myer\n\npower_flux= 143233305.53349283 #np.sum(intensity)\ntime = 1.5708623136179358 #Time\ntime2 = 0.0018129311137857003 #solution to pendulum\ntime3 = 778.859504122254 #constant\n\nmass = 0\nacceleration = 2.8601173622066867 #divergence intensity / divergence radial mean\ndisplacement = 0\n\nforce = (-0.01567520579414322+0j) #np.sum(field)\n\n\nmass2 = force / acceleration\n#force2 = mass * acceleration\n\nwork1 = power_flux * time\nwork3 = power_flux * time2\nwork4 = power_flux * time3\n#work2 = force * displacement\n\ndisplacement2 = work4 / force\n\ninertia = Myer_paricle_mass / displacement2\n\n\n#diff_w = work2 / work1\n\nwork4, displacement2, inertia",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "acceleration = 2.8601173622066867 #(-1.6963764826789323)\nmass = 8795519697.65625 #np.sum(galaxy) = force2(mass) \nforce_g = mass * acceleration\ntime = 778.859504122254 #constant\n\n\nforce = (-0.01567520579414322+0j) #np.sum(field)\nmass2 = force / acceleration\n\n#force2(mass) = 8795519697.65625 #np.sum(galaxy)\nforce_k = 7.347215471732027 #np.sum(kinetic)\n\n\nforce_g, force*1000/force_k, time",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#period time = 4 * (np.sqrt(L/g) * (np.sum(totl)+1)*(np.pi/2))\n##general solution = A(np.sin(y0)*np.cos(w0-t)-np.cos(y0)*np.sin(w0-t))\ng = 77376289430.87982 #Myer_Constant\ng2 = 7.347215471732027+0j #np.sum(kinetic)\nresid = 1.5759240156032317 #time\nL = len(GG)**2\ntime = 4 * (np.sqrt(L/g) * resid)\nforce = 7.347215471732027 #np.sum(kinetic)",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#If φ denotes the electrostatic potential associated to a charge distribution q, \n#then the charge distribution itself is given by the negative of the Laplacian of \n#φ:\n\n#φ = eign_motion\n\n#q = −ε0Δφ\n\n#where ε0 is the electric constant = constant_Newton\n\n#The same approach implies that the negative of the Laplacian of the \n#gravitational potential is the mass distribution = galaxy\n\n#Finding the potential function subject to suitable boundary conditions is \n#equivalent to solving Poisson's equation\n\n#=solve_heat_equation\n\n#Another motivation for the Laplacian appearing in physics is that solutions to \n#Δf = 0 in a region U are functions that make the Dirichlet energy functional \n#stationary:\n\n#E(f)=.5∫U‖∇f‖2dx = intg = lambda galaxy: galaxy #integrate.quad(intg, 0, np.inf)\n\n#The Laplacian also can be generalized to an elliptic operator called the \n#Laplace–Beltrami operator defined on a Riemannian manifold. The Laplace–Beltrami \n#operator, when applied to a function, is the trace (tr) of the function's \n#Hessian:\n\n#Δf=tr(H(f)) = Epotential = np.mat(np.diag(potential, 0))\n\n#where the trace is taken with respect to the inverse of the metric tensor",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "constant_Avg = (6.02 * (10**23))\n5 * (10**-6) = volume\nvolume * .895 = 4.48 * (10**-6)\n4.48 * (10**-6) / 282.47 = X\nX * constant_Avg\n5.235 * (10**-28)\nL = 8 * (10**-10)\nA = 6.5 * (10**-19)\nN = 9.55 * (10**15)\nD = A / N\npi = 6.2 * (10**-3) / (0.04**2)\n\n\ncritical temperature = (((n / zeta)**(2/3)) * ((2*np.pi*hbar**2) / (m * kb)))\n\nTc = #is the critical temperature,\nn = #the particle density,\nm = #mass per boson,\nhbar\nkB #the Boltzmann constant \nzeta 3/2 Riemann zeta function; 2.6124",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#stress energy tensor\n\nflux = 143233305.53349283 #np.sum(intensity)\nvelocity = 151925611.698717 #np.sum(radial_mean)\nvelocity2 = eig_vec2\nvelocity3 = np.sqrt(diffusivity * (np.sum(radial_mean)))\ndensity = (0.030762591371004892+0j) #np.sum(density)\nacceleration = 2.8601173622066867 #divergence intensity / divergence radial mean\nforce = (-0.01567520579414322+0j) #np.sum(field)\nforce2(mass) = 8795519697.65625 #np.sum(galaxy)\n\n#np.sum(intensity)/np.sum(radial_mea\n#Energy per unit volume = work / unit volume = forc3 per unit area = pressure (stress)\n\navg_energy = boltzman\nwork = force*displacement = force*least action\nheat capacitance = specific heat*temperature = velocity\nstress = magnetic flux density (tension)\npressure = stress\npower = work/time",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Rotation curve\n\n70810193.12270346+4.324808029379932e-10j #np.sum(fourier_inten)\n\n#Surface density\nvelocity = 151925611.698717 #np.sum(radial_mean)",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}